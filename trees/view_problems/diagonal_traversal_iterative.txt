{
import java.util.*;
import java.util.Map.Entry;
//Tree node
class TreeNode
{
    int data; //node data
    TreeNode left, right; //left and right child's reference
    // Tree node constructor
    TreeNode(int d)
    {
        data = d;
        left = right = null;
    }
}
class DiagonalPrint
{
    public static void main(String[] args)
    {
                Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t --  >0 )
		{
                        int n=sc.nextInt();
			TreeNode root=null;
			if(n==1)
			{
				int a=sc.nextInt();
				System.out.println(a);
				continue;
			}
			else
			{
		while(n-->0){
				int n1=Integer.parseInt(sc.next());
				int n2=Integer.parseInt(sc.next());
				char lr=sc.next().charAt(0);
				if(root==null)
				{
					root=new TreeNode(n1);
					switch(lr)
					{
						case 'L':
						root.left=new TreeNode(n2);
						break;
						case 'R':
						root.right=new TreeNode(n2);
						break;
					}
				}
				else{
					insert(root,n1,n2,lr);
				}
			}
			}
			GfG tree = new GfG();
        tree.diagonalPrint(root);
		System.out.println();

    }
	}
	public static void insert(TreeNode root,int n1,int n2,char lr){
		if(root==null)
			return;
		if(root.data==n1){
		switch(lr)
					{
						case 'L':
						root.left=new TreeNode(n2);
						break;
						case 'R':
						root.right=new TreeNode(n2);
						break;
					}
		}
		else{
			insert(root.left,n1,n2,lr);
			insert(root.right,n1,n2,lr);
		}
	}
}
}

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/* Node is defined as
class TreeNode
{
    int data; //node data
    TreeNode left, right; //left and right child's reference
    // Tree node constructor
    public TreeNode(int data)
    {
        this.data = data;
         left = right = null;
    }
}*/
class Pair
{
    TreeNode r;
    int d;
    Pair(TreeNode r,int d)
    {
        this.d=d;
        this.r=r;
    }
}
class GfG
{
    LinkedHashMap<Integer,Vector<Integer>>l=new LinkedHashMap<>();
     public void diagonalPrint(TreeNode root)
      {
           //add your code here.
           if(root==null)return;
           slope(root,0);

           for(Integer i:l.keySet())
           {
               for(Integer a:l.get(i))
                    System.out.print(a+" ");

           }
      }
      public void slope(TreeNode root,int d)
      {
          if(root==null)return;
          else
          if(l.containsKey(d))
          {
              l.get(d).add(root.data);
          }
          else
          {
              Vector<Integer>w=new Vector<>();
              w.add(root.data);
              l.put(d,w);
          }
          slope(root.left,d-1);
          slope(root.right,d);
      }
}