{
//Initial Template for Java
import java.util.*;
import java.util.Scanner;
import java.util.HashSet;
import java.lang.Math;
    class Node
    {
        int data;
        Node left,right;
        Node(int d) {data = d; left =right= null; }
    }

public class GFG2
{
    public static Node target;
    GFG2(){
        target=null;
    }
	public static void inorder(Node root,int key)
	{
	    if(root==null)
	    return;
	    inorder(root.left,key);
	    if(root.data==key)
	    target=root;
	    inorder(root.right,key);
	}
     /* Drier program to test above functions */
    public static void main(String args[])
    {
         Scanner sc = new Scanner(System.in);
		 int t=sc.nextInt();

		 while(t-->0)
         {
			int n = sc.nextInt();
			GFG2 llist=new GFG2();
			Node root=null,parent=null;
			HashMap<Integer, Node> m = new HashMap<>();
            for(int i=0;i<n;i++)
            {
                int a=sc.nextInt();
                int b=sc.nextInt();
                char c=sc.next().charAt(0);
                if(m.containsKey(a)==false)
                {
                    parent=new Node(a);
                    m.put(a,parent);
                    if(root==null)
                    root=parent;
                }
                else
                    parent=m.get(a);
                Node child=new Node(b);
                if(c=='L')
                parent.left=child;
                else
                parent.right=child;
                m.put(b,child);
            }
            int x=sc.nextInt();
            GFG obj = new GFG();
            System.out.println(obj.countSubtreesWithSumX(root,x));
		}
	}
}
}

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

//User function Template for Java
/*class Node
{
    int data;
    Node left,right;
    Node(int d)
    {
        data=d;
        left=right=null;
    }
}*/
// Return the count of the sub-trees having sum as X.
class GFG
{
    int count=0;

    int countSubtreesWithSumX(Node root, int x)
    {
	//Add your code here.

	if(root==null)return 0;
    int l=count(root.left,x);
            int r=count(root.right,x);
            int sum=l+r+root.data;
            if(sum==x)count++;
            return count;


    }
     int   count(Node root,int x)
        {
            if(root==null)return 0;
            int l=count(root.left,x);
            int r=count(root.right,x);
            int sum=l+r+root.data;
            if(sum==x)count++;
            return sum;
        }
}