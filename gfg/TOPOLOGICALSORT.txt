{
import java.util.*;
class Topological{
	@SuppressWarnings("unchecked")
public static void main(String[] args)
{
	Scanner sc=new Scanner(System.in);
	int T=sc.nextInt();
	while(T-->0)
	{
		ArrayList<Integer>[] graph;
		int N,E;
		E=sc.nextInt();
		N=sc.nextInt();
		graph = new ArrayList[10001];
		for (int i=0; i<10001; ++i)
				graph[i] = new ArrayList();
		for(int i=0;i<E;i++)
		{
			int u,v;
			u=sc.nextInt();
			v=sc.nextInt();
			graph[u].add(v);
		}
		GfG g=new GfG();
		int res[] = g.topoSort(graph,N);
		boolean valid =true;
		for(int i=0;i<N;i++)
		{
			int n=graph[res[i]].size();
			for(int j=0;j<graph[res[i]].size();j++)
			{
				for(int k=i+1;k<N;k++)
				{
					if(res[k]==graph[res[i]].get(j))
						n--;
				}
			}
			if(n!=0)
			{
				valid =false;
				break;
			}
		}
		if(valid==false)
			System.out.println("0");
		else
			System.out.println("1");
		}
	}
}
}

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/*Complete the function below*/
class GfG
{
         public static int[] topoSort(ArrayList<Integer> graph[],int V)
         {
         //add code here.
         LinkedHashMap<Integer,Integer>lhm=new LinkedHashMap<>();
         int o[]=new int[V];
            for(int i=0;i<V;i++)
            {
             lhm.put(i,0);
            }
            for(int i=0;i<V;i++)
            {
                for(int j=0;j<graph[i].size();j++)
                {
                 int val=graph[i].get(j);
                 lhm.replace(val,lhm.get(val)+1);

                }
             }
         Queue<Integer>q=new LinkedList<>();
            for(int i=0;i<V;i++)
             {
             if(lhm.get(i)==0)
             q.offer(i);
             }
         int index=0;
             while(!q.isEmpty())
            {
             int x=q.poll();
             o[index++]=x;
                for(int i=0;i<graph[x].size();i++)
                {
                 int k=graph[x].get(i);
                 lhm.replace(k,lhm.get(k)-1);
                 if(lhm.get(k)==0)
                 q.offer(k);


                }
             }
       return o;
    }
}
