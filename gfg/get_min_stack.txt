{
import java.util.*;
class Get_Min_From_Stack
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		while(T>0)
		{
			int q = sc.nextInt();
			GfG g = new GfG();
			while(q>0)
			{
				int qt = sc.nextInt();

				if(qt == 1)
				{
					int att = sc.nextInt();
					g.push(att);
					//System.out.println(att);
				}
				else if(qt == 2)
				{
					System.out.print(g.pop()+" ");
				}
				else if(qt == 3)
				{
					System.out.print(g.getMin()+" ");
				}

			q--;
			}
			System.out.println();
		T--;
		}

	}
}
}

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

class GfG
{
    int min;
    Stack<Integer> st=new Stack<>();;
    /*returns min element from stack*/
    int getMin()
    {
	// Your code here
	if(st.isEmpty())return -1;
	else return min;

    }

    /*returns poped element from stack*/
    int pop()
    {
	// Your code here
        if(!st.isEmpty())
        {
            if(st.peek()<0)
            {int t=st.pop();
            int pop=min;
            min=min-t;
            return pop;


            }
            else return st.pop();
        }
        if(st.isEmpty())min=-1;

	return min;
    }
    /*push element x into the stack*/
    void push(int x)
    {
	// Your code here

	        if(st.isEmpty())
	        {st.push(x);min=x;
	        }
	        else
	        {
	            if(x>=min)
	            {
	                st.push(x);
	            }
	            else
	            {
	                int t=x-min;
	                st.push(t);
	                min=x;
	            }
	        }
    }
}